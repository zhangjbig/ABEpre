{"trial_id": "1", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "num_dense_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense_units_0", "default": null, "conditions": [], "min_value": 32, "max_value": 512, "step": 32, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.01, "conditions": [], "values": [0.01, 0.001, 0.0001], "ordered": true}}], "values": {"num_dense_layers": 1, "dense_units_0": 416, "learning_rate": 0.01}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/base_tuner.py\", line 235, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/tuner.py\", line 287, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/tuner.py\", line 214, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/hypermodel.py\", line 144, in fit\n    return model.fit(*args, **kwargs)\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/tensorflow/python/eager/execute.py\", line 52, in quick_execute\n    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\ntensorflow.python.framework.errors_impl.ResourceExhaustedError: Graph execution error:\n\nDetected at node 'model/tf_albert_model/albert/encoder/albert_layer_groups_._0/albert_layers_._0/attention/value/Tensordot/MatMul' defined at (most recent call last):\n    File \"/media/ubuntu/55b53b7a-76ed-4ea2-9e39-eb13d6e00f7b/tcz/ABEpre/\u6258\u5c14\u65af\u6cf0.py\", line 73, in <module>\n      tuner.search(\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/base_tuner.py\", line 230, in search\n      self._try_run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/base_tuner.py\", line 270, in _try_run_and_update_trial\n      self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/base_tuner.py\", line 235, in _run_and_update_trial\n      results = self.run_trial(trial, *fit_args, **fit_kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/tuner.py\", line 287, in run_trial\n      obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/tuner.py\", line 214, in _build_and_fit_model\n      results = self.hypermodel.fit(hp, model, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras_tuner/engine/hypermodel.py\", line 144, in fit\n      return model.fit(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 1685, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 1284, in train_function\n      return step_function(self, iterator)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 1268, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 1249, in run_step\n      outputs = model.train_step(data)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 1050, in train_step\n      y_pred = self(x, training=True)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 558, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/functional.py\", line 512, in call\n      return self._run_internal_graph(inputs, training=training, mask=mask)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/functional.py\", line 669, in _run_internal_graph\n      outputs = node.layer(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/training.py\", line 558, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/modeling_tf_utils.py\", line 810, in run_call_with_unpacked_inputs\n      if saved_weight_value is not None:\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 813, in call\n      outputs = self.albert(\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/modeling_tf_utils.py\", line 810, in run_call_with_unpacked_inputs\n      if saved_weight_value is not None:\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 627, in call\n      encoder_outputs = self.encoder(\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 434, in call\n      for i in range(self.num_hidden_layers):\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 437, in call\n      layer_group_output = self.albert_layer_groups[group_idx](\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 380, in call\n      for layer_index, albert_layer in enumerate(self.albert_layers):\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 384, in call\n      layer_output = albert_layer(\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 341, in call\n      attention_outputs = self.attention(\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/transformers/models/albert/modeling_tf_albert.py\", line 268, in call\n      mixed_value_layer = self.value(inputs=input_tensor)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 65, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/engine/base_layer.py\", line 1145, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/utils/traceback_utils.py\", line 96, in error_handler\n      return fn(*args, **kwargs)\n    File \"/home/ubuntu/miniconda3/envs/BCpre/lib/python3.10/site-packages/keras/layers/core/dense.py\", line 244, in call\n      outputs = tf.tensordot(inputs, self.kernel, [[rank - 1], [0]])\nNode: 'model/tf_albert_model/albert/encoder/albert_layer_groups_._0/albert_layers_._0/attention/value/Tensordot/MatMul'\nOOM when allocating tensor with shape[16384,128] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node model/tf_albert_model/albert/encoder/albert_layer_groups_._0/albert_layers_._0/attention/value/Tensordot/MatMul}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_train_function_14344]\n"}